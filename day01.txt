자바의 특징
1. 멀티쓰레드
2. 플랫폼에 독립적: 윈도우나 리눅스 등 운영체제에 구애받지 않고 사용 가능함 
3. 객체지향언어

-객체지향언어의 특징
캡슐화: 하나의 문제 해결을 위한 data와 method를 한 단위로 묶음. 클래스 내부 정의에 대해 외부에서 볼 수 없도록함이 특징(은닉화)
추상화: 클래스들의 공통적인 요소를 묶어 하나의 클래스로 정의하는 것(다중 상속 불가, 추상클래스에서는 일반 메소드도 같이 사용 가능함)
다형성: 하나의 객체나 메소드가 여러가지 타입을 가질 수 있는 것. 
1) 오버로딩: 같은 이름의 메소드를 매개변수의 타입이나 개수에 따라 중복 정의. 매개변수에 따라 특정 메소드가 호출되도록 하는 것
2) 오버라이딩: 부모클래스에 있는 메소드를 자식클래스에서 재정의하여 사용하는 것 
상속: 기존의 클래스에 기능을 추가하거나 재정의하여 새로운 클래스를 정의하는 것. 기존 정의되어 있는 클래스의 필드와 메소드를 물려받아 새로운 클래스를 생성할 수 있음.
객체: 클래스에 정의된 내용대로 메모리에 생성된 것
클래스: 객체를 만드는 설계도(객체를 생성하는 틀)

API(Application Programming Interface) : 운영체제와 응용프로그램 사이의 통신에 사용되는 언어나 메시지 형식. 애플리케이션을 서로 연결하여 서로 통신할 수 있다는 것임. Api는 레스토랑의 점원이다.

추상클래스와 인터페이스
1. 추상클래스
- 추상메소드를 하나 이상 가지는 클래스
- New 객체를 생성할 수 없음
- 상속받은 클래스는 추상 method를 구현해야만 인스턴스를 생성할 수 이ㅣㅆ음
- 추상메소드란 함수의 리턴타입과 파라미터만 있고 정의 부분이 없는 함수

2. 인터페이스
- 상수 또는 추상method만 정의할 수 있음
- 다중 상속 가능
- 모든 변수는 static(정태적)이며 final임
- 자식클래스들이 공통된 method를 포함하도록 하는 기능만 함
- 구현된 method는 포함 할 수 없음

3. 추상클래스와 인터페이스의 공통점
- 객체를 생성할 수 없음
- 상속해서 하위 클래스를 통하여 객체를 발생시킴(method를 재정의해야 함)

전역변수, 지역변수, 정적변수
1. 전역변수: 프로그램에서 전반적으로 사용 가능 / 함수밖에서 정의해놓으면 다른 함수에서도 사용 가능
2. 지역변수: 함수 안에서만 사용 가능한 함수
3. 정적변수: 한번 정의하면 그 값은 계속적으로 메모리에 남아있음. 프로그램이 종료될 때 메모리에서 지워짐. 함수 안에서 사용해도 함수가 끝날 때 지워지지 않음.

스레드: 하나의 프로그램이 동시에 하나 이상의 처리(프로세스)를 수행하는 것
디버깅: 버그(결함) 에러를 수정하는 것

Collection에서 데이터를 저장하는 3가지와 그 특징
- Set: 순서가 없고 동일한 데이터 허용 안 됨
- List: 배열과 같은 구조지만, 가변적 길이를 가지고 있음(크기 지정X)
- Map: key값과 value값의 형식으로 저장되며 key값은 중복 불가

DBMS: 데이터베이스 관리 시스템, 응용프로그램이 데이터에 대한 액세스가 가능하도록 DB를 관리하는 소프트웨어 기능 및 데이터가 저장되어 있는 장소

RDBMS: 관계형 데이터베이스: 관계형 데이터 모델에 기반한 데이터 베이스
관계형 데이터 베이스: 데이터를 테이블로 표현, 테이블을 집합으로 받아들임. 사용자에게 데이터를 관계로서 표현함. 행과 열의 집합으로 구성된 테이블의 묶음 형식으로 데이터를 제공함.

- 자바스크립트는 브라우저의 객체를 제어하는데 사용됨

쿠키와 세션의 차이
1. 쿠키: 클라이언트에 정보를 저장, 서버에 부하 없음, 사라지는때(시간) 지정 가능
2. 세션: 서버에 정보 저장하기 때문에 서버에 부하가 생김. 해당 클라이언트와 일정시간동안 작용이 없으면 서버메모리에서 해제됨. 직접적으로 해제시킬 수 있는 method가 있음

Ajax란?
-웹 클라이언트 화면 제어를 보다 세밀하게 하기 위한 기술.
특징: 필요한 데이터만 서버로 보내고 해당 정보만 받음. 
서버로부터 정보를 받을 때에는 xml, json 형태로 받고, 
client에서는 그 정보들을 dom을 통해 화면을 재가공하여 보여주므로 서버와 교환되는 데이터의 양이 적어지므로 점유율을 낮출 수 있음. 
client에서의 데이터 처리로 서버에 부담이 덜가므로 다른 응답 요청에 신속히 응대함
제너릭? 클래스를 선언할 때 타입을 결정하지 않고 객체를 생성할 때 유동적인 타입으로 재사용하기 위한 것

리플렉션: 컴파일러를 무시하고 런타임 상황에서 메모리에 올라간 클래스나 메서드 등의 정의를 동적으로 찾아 조작할 수 있는 일련의 행위. 

자바란 객체지향 프로그래밍 언어로써 가장 중요한 특징은 운영체제에 독립적이란 것입니다. 자바로 작성된 프로그램은 운영체제의 종류에 관계없이 실행이 가능합니다. 그 이유는 자바를 실행하기 위한 가상 머신인 JVM이 있기 때문입니다. 다른 애플리케이션은 프로그램 실행 시 바로 OS로 가는 반면 자바 애플리케이션은 각 운영체제에 맞는 JVM을 거쳐 OS로 진행되기 때문에 프로그램 수정 없이 실행 가능합니다.

변수란? 하나의 값을 저장할 수 있는 메모리 공간

JDK란? 자바프로그램 개발도구로써 개발을 위한 클래스, 컴파일러, 실행 및 배포두구를 포함하여 개발을 위한 전반적인 환경을 제공하는 것

자바의 메모리 영역
JVM의 구성: 
- 클래스영역: 클래스 코드를 저장하는 영역
- 자바스택: 메소드를 호출할 때 관련 정보를 저장하는 영역
- 힙(Heap): new라는 키워드를 통해 객체가 생성될 때 할당받는 영역
- 네이티브: method 스텍
메서드 영역: static 변수, 전역변수, 코드에서 사용되는 class 정보 등이 올라감. 자바 프로그램이 실행되면 JVM(자바 가상 머신)은 OS로부터 메모리를 할당받고, 그 메모리를 용도에 따라서 여러 영역으로 나누어 관리를 한다.
JVM의 메모리 공간(Runtime Data Area)은 크게 Method(Static) 영역, Stack 영역, Heap 영역으로 구분되고 데이터 타입(자료형)에 따라 각 영역에 나눠서 할당 되게 된다.


